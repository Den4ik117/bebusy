import {Repository} from '../repositories'
import {IAction, INodeChat, IOpinion, IResume, IUpdate} from '../models'
import axios from 'axios'
import {getCurrentDatetime, getRandomInteger} from '../utils'

type BotRequestConfig = {
    method: 'sendMessage',
    data: {
        chat_id: number,
        text: string,
        actions?: IAction[][],
        resume_id?: number,
    },
}

const botRequest = (config: BotRequestConfig) => axios.post(
    `${process.env.APP_URL}/bots/${process.env.RESUME_BOT_TOKEN}/${config.method}`,
    config.data,
)

export interface ResumeBotService {
    processUpdate(update: IUpdate): Promise<void>
    getOrCreateNodeChatByChatIdAndUserId(chatId: number, userId: number): Promise<INodeChat>
    sendMessage(chatId: number, text: string, actions?: IAction[][], resumeId?: number): void
    updateNodeIdByChatIdAndUserId(chatId: number, userId: number, nodeId: number): Promise<void>
    getRandomResume(userId: number): Promise<IResume | undefined>
    applyResumeOpinion(resumeId: number, userId: number): Promise<IOpinion | undefined>
    getUncompletedOpinion(userId: number): Promise<IOpinion | undefined>
    updateOptionPhoto(opinionId: number, photo: number): Promise<IOpinion | undefined>
    updateOptionReadable(opinionId: number, readable: number): Promise<IOpinion | undefined>
    updateOptionCapacity(opinionId: number, capacity: number): Promise<IOpinion | undefined>
    updateOptionExperience(opinionId: number, experience: number): Promise<IOpinion | undefined>
    updateOptionTotal(opinionId: number, total: number): Promise<IOpinion | undefined>
    updateOptionCommentAndCompletedAt(opinionId: number, comment: string): Promise<IOpinion | undefined>
}

export const NewResumeBotService = async (repositories: Repository): Promise<ResumeBotService> => {
    const processUpdate = async (update: IUpdate): Promise<void> => {
        if (!update.message || !update.message.user) return

        if (['–ß–∞—Ç —Å–æ–∑–¥–∞–Ω', '/start', '–ù–∞—á–∞—Ç—å'].includes(update.message.text)) {
            await botRequest({
                method: 'sendMessage',
                data: {
                    chat_id: update.message.chat_id,
                    text: '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—é–º–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–í —Å–ø–∏—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ —Ç–≤–æ—ë —Ä–µ–∑—é–º–µ, —Å–º–æ—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ—ë —Ä–µ–∑—é–º–µ —Å hh.ru',
                    actions: [
                        [{ text: '–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!' }],
                    ],
                }
            })
        } else if (update.message.text === '–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!') {
            await botRequest({
                method: 'sendMessage',
                data: {
                    chat_id: update.message.chat_id,
                    text: '–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç! –ü—Ä–∏—Å—ã–ª–∞—é —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–∏–∂–µ üëá',
                }
            })
            await botRequest({
                method: 'sendMessage',
                data: {
                    chat_id: update.message.chat_id,
                    text: '–†–µ–∑—é–º–µ:',
                    actions: [
                        [{ text: '1. –ì–æ–≤–Ω–æ/–∫–∞–∫–∞—à–∫–∞/—É–¥–∞–ª–∏ —Ä–µ–∑—é–º–µ' }],
                        [{ text: '2. –ù—É —Ç–∞–∫–æ–µ... –Ω–∞–¥–æ —Ä–∞–±–æ—Ç–∞—Ç—å' }],
                        [{ text: '3. –§—É-—Ñ—É, —á—É–¥–æ, –µ—Å–ª–∏ —Ç–µ–±–µ —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç' }],
                        [{ text: '4. –ù—É —Ö–æ—Ä–æ—à–æ' }],
                        [{ text: '5. –ß—Ç–æ –∑–∞ –∏–º–±–∞' }],
                    ],
                    resume_id: 1,
                }
            })
        } else {
            await botRequest({
                method: 'sendMessage',
                data: {
                    chat_id: update.message.chat_id,
                    text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                    actions: [
                        [{ text: '–ù–∞—á–∞—Ç—å' }]
                    ],
                }
            })
        }
    }

    const getOrCreateNodeChatByChatIdAndUserId = async (chatId: number, userId: number): Promise<INodeChat> => {
        let nodeChat = await repositories.NodeChatRepository.getNodeChatByChatIdAndUserId(chatId, userId)

        if (!nodeChat) {
            nodeChat = <INodeChat> await repositories.NodeChatRepository.createNodeChat({
                chat_id: chatId,
                user_id: userId,
                node_id: 1,
            })
        }

        return nodeChat
    }

    const sendMessage = async (chatId: number, text: string, actions?: IAction[][], resumeId?: number) => {
        await botRequest({
            method: 'sendMessage',
            data: {
                chat_id: chatId,
                text,
                actions,
                resume_id: resumeId,
            },
        })
    }

    const updateNodeIdByChatIdAndUserId = async (chatId: number, userId: number, nodeId: number): Promise<void> => {
        await repositories.NodeChatRepository.updateNodeChat({
            chat_id: chatId,
            user_id: userId,
            node_id: nodeId,
        })
    }

    const getRandomResume = async (userId: number): Promise<IResume | undefined> => {
        const opinions = await repositories.OpinionRepository.getOpinionsByUserId(userId)

        const resumeIds = opinions.map(opinion => opinion.resume_id)

        const resumes = await repositories.ResumeRepository.getAvailableResumesExcludeIds(resumeIds)

        if (resumes.length === 0) return undefined

        const index = getRandomInteger(0, resumes.length - 1)

        return resumes[index]
    }

    const applyResumeOpinion = async (resumeId: number, userId: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.createOpinion({
            resume_id: resumeId,
            user_id: userId,
            updated_at: getCurrentDatetime(),
            created_at: getCurrentDatetime(),
        })
    }

    const getUncompletedOpinion = async (userId: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.getUncompletedOpinion(userId)
    }

    const updateOptionPhoto = async (opinionId: number, photo: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionPhoto(opinionId, photo)
    }

    const updateOptionReadable = async (opinionId: number, readable: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionReadable(opinionId, readable)
    }

    const updateOptionCapacity = async (opinionId: number, capacity: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionCapacity(opinionId, capacity)
    }

    const updateOptionExperience = async (opinionId: number, experience: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionExperience(opinionId, experience)
    }

    const updateOptionTotal = async (opinionId: number, total: number): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionTotal(opinionId, total)
    }

    const updateOptionCommentAndCompletedAt = async (opinionId: number, comment: string): Promise<IOpinion | undefined> => {
        return await repositories.OpinionRepository.updateOptionCommentAndCompletedAt(
            opinionId,
            getCurrentDatetime(),
            comment,
        )
    }

    return {
        processUpdate,
        getOrCreateNodeChatByChatIdAndUserId,
        sendMessage,
        updateNodeIdByChatIdAndUserId,
        getRandomResume,
        applyResumeOpinion,
        getUncompletedOpinion,
        updateOptionPhoto,
        updateOptionReadable,
        updateOptionCapacity,
        updateOptionExperience,
        updateOptionTotal,
        updateOptionCommentAndCompletedAt,
    }
}
